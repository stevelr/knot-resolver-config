-- SPDX-License-Identifier: CC0-1.0
-- vim:syntax=lua:set ts=2 sw=4:set expandtab
-- Refer to manual: https://knot-resolver.readthedocs.org/en/stable/

-- Knot-resolver configuration with some utility functions
--  (also see accompanying .sh file with bash/zsh aliases)
--
-- Normal DNS resolution:
--   requests for <internal-domain> are forwarded to internal domain resolver
--   other requests forwarded to
--       VPN resolver, if we are on vpn
--       Upstream resolvers using DNS-over-TLS, if not on vapn
-- reset_rules() resets the policy to the normal set as described above
-- forward_all_to(IPADDR) bypasses normal rules and forwards all requests
--   to the specified address. For the hightest compatibility the forwarded
--   requests are not encrypted over tls. This state is expected to be brief,
--   for example, during local network setup, captive portal, etc., after
--   which reset_rules() would be invoked to re-establish secure forwarding.

local LISTEN             = { '127.0.0.1', '::1' }  -- port 53 
local LISTEN_TLS         = { '127.0.0.1', '::1' }  -- port 853 with TLS
-- DNS resolver within VPN. Set to '' to disable
local VPN_RESOLVER       = '10.64.0.1'
-- requests for local home/office domain go to private server
-- To disable local lookup, set LOCAL_NET to ''
local LOCAL_NET          = 'mydomain.com'
local LOCAL_NET_RESOLVER = '10.1.1.1'

local ABUSE_LIST         = 'abuse.ch.rpz'
local ENABLE_ABUSE_CHECK = true
local CA_CERT_PATH       = '/etc/pki/ca-trust/extracted/tls-ca-bundle.pem'

modules = {
  'policy',
  'hints',
  -- serve_stale can mitigate outages or ddos attacks against dns servers
  'serve_stale < cache',
  'workarounds < iterate',
  'stats',
  'predict'
}

-- Forwarding Rules
--
-- Forward requests to VPN provider dns server
if VPN_RESOLVER ~= '' then
    vpn_forward = policy.FORWARD({VPN_RESOLVER})
end

-- Forward to upstream resolvers. The list below may contain up to 4  servers.
-- knot-resolver monitors each server's performance and favors the fastest!
upstream_forward = policy.TLS_FORWARD({
  {'9.9.9.9', hostname='dns.quad9.net', ca_file=CA_CERT_PATH},
  {'9.9.9.10', hostname='dns.quad9.net', ca_file=CA_CERT_PATH},
  {'2620:fe::fe', hostname='dns.quad9.net', ca_file=CA_CERT_PATH},
  {'2620:fe::10', hostname='dns.quad9.net', ca_file=CA_CERT_PATH},

  -- If you prefer cloudflare DNS-over-TLS to Quad9, you can use these:
  --  { '1.1.1.1', hostname='cloudflare-dns.com', ca_file=CA_CERT_PATH},
  --  { '1.0.0.1', hostname='cloudflare-dns.com', ca_file=CA_CERT_PATH},
  --  { '2606:4700:4700::1111' , hostname='cloudflare-dns.com', ca_file=CA_CERT_PATH},
  --  { '2606:4700:4700::1001' , hostname='cloudflare-dns.com', ca_file=CA_CERT_PATH},
})


-- Return policy rule VPN or upstream, depending on whether vpn is active
function vpn_aware_forward (request, query)
  if VPN_RESOLVER ~= '' then
    local ni = net.interfaces()
    if ni.tun0 then
      return vpn_forward
    end
  end
  return upstream_forward
end

-- enable or disable abuse check. Enabled if parameter is truthy.
function block_abuse(val)
  local status=''
  if val or val == nil then
    if ENABLE_ABUSE_CHECK then
      status = "No change - abuse check already enabled."
    else
      ENABLE_ABUSE_CHECK = true
      status = "Abuse check enabled. Call reset_rules() to activate."
    end
  else
    if not ENABLE_ABUSE_CHECK then
      status = "No change - abuse check is disabled"
    else
      ENABLE_ABUSE_CHECK = false
      status = "Abuse check disabled. Call reset_rules() to activate."
    end
  end
  return status
end

-- Replace rules.
-- If parameter is a non-empty string, it is assumed to be a valid IP,
-- and all requests are forwarded to that resolver.
-- Otherwise, normal rules apply (local-net + vpn-aware)
local function replace_rules (forward_ip)
  local status=''

  -- clear all existing rules
  while #policy.rules > 0 do
    local id=policy.rules[#policy.rules].id
    policy.del(id)
  end

  if ENABLE_ABUSE_CHECK then
    policy.add(policy.rpz(policy.DENY, ABUSE_LIST))
    log('Abuse check enabled')
    status = status .. '(abuse) '
  else
    log('Warning: Abuse check is disabled,')
  end

  if forward_ip ~= '' then
    log('Forwarding all requests to %s', forward_ip)
    policy.add(policy.all(policy.FORWARD({forward_ip})))
    status = status .. '(' .. forward_ip .. ') '
  else
    log('Resetting rules to normal configuration')
    -- Forward all queries for LOCAL_NET to given resolver
    policy.add(policy.suffix(policy.FORWARD(LOCAL_NET_RESOLVER), {todname(LOCAL_NET)}))
    -- I seem to need this for forwarded queries to work
    -- possibly a DNSSEC or certificate issue?
    trust_anchors.set_insecure({LOCAL_NET})
    status = status .. '(' .. LOCAL_NET .. ',' .. LOCAL_NET_RESOLVER .. ') '

    policy.add(vpn_aware_forward)
    status = status .. '(normal_or_vpn) '
  end
  return status
end

-- Reset all rules to the normal set
function reset_rules()
  return replace_rules('')
end

-- Determine whether IP address is valid
-- from https://stackoverflow.com/questions/10975935/lua-function-check-if-ipv4-or-ipv6-or-string
local R = {ERROR = 0, IPV4 = 1, IPV6 = 2, STRING = 3}
function GetIPType(ip)
  if type(ip) ~= "string" then return R.ERROR end

  -- check for format 1.11.111.111 for ipv4
  local chunks = {ip:match("^(%d+)%.(%d+)%.(%d+)%.(%d+)$")}
  if #chunks == 4 then
    for _,v in pairs(chunks) do
      if tonumber(v) > 255 then return R.STRING end
    end
    return R.IPV4
  end
  -- check for ipv6 format, should be 8 'chunks' of numbers/letters
  -- without leading/trailing chars
  -- or fewer than 8 chunks, but with only one `::` group
  local chunks = {ip:match("^"..(("([a-fA-F0-9]*):"):rep(8):gsub(":$","$")))}
  if #chunks == 8
  or #chunks < 8 and ip:match('::') and not ip:gsub("::","",1):match('::') then
    for _,v in pairs(chunks) do
      if #v > 0 and tonumber(v, 16) > 65535 then return R.STRING end
    end
    return R.IPV6
  end
  return R.STRING
end

-- Bypass rules and forward all lookups to the forward_ip.
-- IP is first verified to be a valid ipv4 or ipv6 address
function forward_all_to(forward_ip)
  local iptype=GetIPType(forward_ip)
  if iptype == R.IPV4 or iptype == R.IPV6 then
    return replace_rules(forward_ip)
  else
    return 'Not a valid ip address:' .. replace .. ' - Forward Policy not modified.'
  end
end

-- Initialize policy
replace_rules('')

-- Prefetch learning (15-minute blocks over 24 hours)
predict.config({ window = 15, period = 24 })

-- Cache size
cache.size = 50 * MB

-- Set up tcp/udp listeners
for _,ip in pairs(LISTEN) do
  log("listening on %s:53", ip)
  net.listen(ip, 53, { kind = 'dns', freebind = true })
end
for _,ip in pairs(LISTEN_TLS) do
  log("listening on %s:853 TLS", ip)
  net.listen(ip, 853, { kind = 'tls', freebind = true })
end

